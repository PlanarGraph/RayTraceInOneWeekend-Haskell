
==================== FINAL INTERFACE ====================
2019-05-14 01:26:05.007871 UTC

interface raytrace-0.1.0.0-DA41VseRCpx3rR4fL5DUdq:Hitable 8043
  interface hash: 5cf8b5a3272bd44248caa0af290355ab
  ABI hash: c7faafffe95f219dfdf22da3435d131a
  export-list hash: fb838290faf58a54f3aa26dd83e8d866
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 7a6a6921a470b0a72edecfea251bd70a
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Hitable.discriminant
  Hitable.hit
  Hitable.randomInUnitSphere
  Hitable.reflect
  Hitable.refract
  Hitable.scatter
  Hitable.schlick
  Hitable.HitRecord{Hitable.MkHR mat normal p t}
  Hitable.Hitable{Hitable.Sphere}
  Hitable.Material{Hitable.Dielectric Hitable.Lambertian Hitable.Metal}
module dependencies: Ray Vect3
package dependencies: array-0.5.2.0 base-4.11.1.0* deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 random-1.1* time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         raytrace-0.1.0.0-DA41VseRCpx3rR4fL5DUdq:Vect3
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Float 99c69d365bb2607725a22530ce1ca4b4
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  random-1.1:System.Random 6bcaf7d3cfad85f40dc48ba73a0e29c2
import  -/  Ray 5e1d3ed2d22855e66b9e329bc7210ca0
  exports: ea48f532ce0ebdf3df85a4de6319a7e4
  MkRay 1b2cc71d1f08cf95ce539aa06859b51c
  Ray dab2c393db8bd018a1ce5ed25bcbe8ec
  pointAtParameter 69a217ac02b2df7acdc3b1f865505d25
import  -/  Vect3 b9cdaf8bcb18f0a8745a2802b5b95b88
  exports: 3b85256eda7109159aaf48e1a3fb813a
  Vect3 0677165c36feaa9e8188c53ca2d24618
  dot f1cf988260bd2b4d219a9c4abddffbbd
  len 10c30e823bf4e59daa55035e0713ec77
  mO ccc736fab26538d940b033676733ae0c
  sqrLen e475dae020b1b6b21cc25499ba4bebbb
  unit 024b2f2ba5cc2f6d9d141284b7f5ce4e
58c7d5611217da238cdadb29da9c9473
  $tc'Dielectric :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3796536009058752018##
                   2864699456807475124##
                   Hitable.$trModule
                   Hitable.$tc'Dielectric2
                   0#
                   Hitable.$tc'Dielectric1) -}
cea503e7bfe6ae8ba025e1f74e7bbfaf
  $tc'Dielectric1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c597d066b7bfd3b1fa5483a623bd27c0
  $tc'Dielectric2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Hitable.$tc'Dielectric3) -}
c7c5506467d505b751ce8e1f535429ce
  $tc'Dielectric3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Dielectric"#) -}
458de80e11d531d450e1fd0e8a3818c3
  $tc'Lambertian :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9554733892249261493##
                   8587730892584792315##
                   Hitable.$trModule
                   Hitable.$tc'Lambertian2
                   0#
                   Hitable.$tc'Lambertian1) -}
26586187dc213c5a6201057a2376a7f6
  $tc'Lambertian1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8280753bf2b5a52f239602e2595bde9a
  $tc'Lambertian2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Hitable.$tc'Lambertian3) -}
811bb5cd88119b2b95850aff8e8a7ce6
  $tc'Lambertian3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Lambertian"#) -}
15fba8dae131829335d3d65517cefe2d
  $tc'Metal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11676913743955019064##
                   2313368113533325254##
                   Hitable.$trModule
                   Hitable.$tc'Metal2
                   0#
                   Hitable.$tc'Metal1) -}
3dc6ae900346a33e4128219507aca169
  $tc'Metal1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
36fde26595c048924eac7d49f2e00aa8
  $tc'Metal2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Hitable.$tc'Metal3) -}
b1f84a2266d34a7de4f33d121332efbc
  $tc'Metal3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Metal"#) -}
d7b37c8a07f6ead6b88b06baf710f1f4
  $tc'MkHR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13078034290823985182##
                   14429262967049541219##
                   Hitable.$trModule
                   Hitable.$tc'MkHR2
                   0#
                   Hitable.$tc'MkHR1) -}
61de4e05a2c28fe68c987da2e0a3524d
  $tc'MkHR1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c3dba6703f34af8c90e61bb4e6e4f770
  $tc'MkHR2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Hitable.$tc'MkHR3) -}
7f5f08e757ee287ceccd751ed7c82606
  $tc'MkHR3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MkHR"#) -}
b7c5ffb10ad482bd83363f17d4a68283
  $tc'Sphere :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15617038153642183468##
                   17846599861857742196##
                   Hitable.$trModule
                   Hitable.$tc'Sphere2
                   0#
                   Hitable.$tc'Sphere1) -}
3cab9495940af3dcd99d8dbbb675ab88
  $tc'Sphere1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1eb3fa8a634418d5b3ea80bcc5687edc
  $tc'Sphere2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Hitable.$tc'Sphere3) -}
b6e537d1b45cdc8a4e4866d71f729108
  $tc'Sphere3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Sphere"#) -}
902af78df62b9e4ef1b6c8cc427c2b63
  $tcHitRecord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1953650942235454999##
                   9093618658068053065##
                   Hitable.$trModule
                   Hitable.$tcHitRecord1
                   0#
                   GHC.Types.krep$*) -}
83c7bd57903f5a9aadeb1b5009bed7a6
  $tcHitRecord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Hitable.$tcHitRecord2) -}
bee5367a0b95106c81117fd63a1288e8
  $tcHitRecord2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HitRecord"#) -}
8828d11c67045fef59ee89f1f897d2cf
  $tcHitable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1977305203856422051##
                   14419486736809321249##
                   Hitable.$trModule
                   Hitable.$trModule1
                   0#
                   GHC.Types.krep$*) -}
c5279759280f933c2a8491b55d64f963
  $tcMaterial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11585270491105393868##
                   15899988169281428883##
                   Hitable.$trModule
                   Hitable.$tcMaterial1
                   0#
                   GHC.Types.krep$*) -}
5996aa4a55689be2754167b2dd0e8996
  $tcMaterial1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Hitable.$tcMaterial2) -}
ff89fc6745f9c9864ce53b185b74b2f6
  $tcMaterial2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Material"#) -}
d7b9811ce24e120fa8e0e892b2b697e2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Hitable.$trModule3
                   Hitable.$trModule1) -}
0a4e23b84fa612c1cfe64b42ddc89793
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Hitable.$trModule2) -}
54267f10edbaa962ede91b96b96e7b77
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Hitable"#) -}
da55b30a0f72bb1bb79172ea47ab0c30
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Hitable.$trModule4) -}
07551b4824ecce90fa7e4ed84fabe977
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("raytrace-0.1.0.0-DA41VseRCpx3rR4fL5DUdq"#) -}
56c847770f1186baa3e519972009544e
  $wdiscriminant ::
    Vect3.Vect3
    -> GHC.Types.Double
    -> Vect3.Vect3
    -> Vect3.Vect3
    -> (# GHC.Types.Double, GHC.Types.Double, GHC.Types.Double #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U))><L,1*U(U)><L,1*U(1*U(U),1*U(U),1*U(U))><L,U(U(U),U(U),U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: Vect3.Vect3)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: Vect3.Vect3)
                   (ww3 :: Vect3.Vect3) ->
                 let {
                   oc :: Vect3.Vect3
                   = case ww2 of ww4 { (,,) ww5 ww6 ww7 ->
                     case ww of ww8 { (,,) ww9 ww10 ww11 ->
                     (GHC.Float.minusDouble ww5 ww9, GHC.Float.minusDouble ww6 ww10,
                      GHC.Float.minusDouble ww7 ww11) } }
                 } in
                 (# Vect3.dot ww3 ww3, Vect3.dot oc ww3,
                    case oc of ww4 { (,,) ww5 ww6 ww7 ->
                    case ww5 of ww8 { GHC.Types.D# ww9 ->
                    case ww6 of ww10 { GHC.Types.D# ww11 ->
                    case ww7 of ww12 { GHC.Types.D# ww13 ->
                    case ww1 of wild { GHC.Types.D# x ->
                    GHC.Types.D#
                      (GHC.Prim.-##
                         (GHC.Prim.+##
                            (GHC.Prim.+## (GHC.Prim.*## ww9 ww9) (GHC.Prim.*## ww11 ww11))
                            (GHC.Prim.*## ww13 ww13))
                         (GHC.Prim.*## x x)) } } } } } #)) -}
31745cb6c191260d7865659c07c6f466
  $wrandomInUnitSphere ::
    [GHC.Types.Double]
    -> (# GHC.Types.Double, GHC.Types.Double, GHC.Types.Double #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
1785fc0cb40b2469492e8b02db60daec
  $wreflect ::
    GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> (# GHC.Types.Double, GHC.Types.Double, GHC.Types.Double #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Double)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: GHC.Types.Double)
                   (ww3 :: GHC.Types.Double)
                   (ww4 :: GHC.Types.Double)
                   (ww5 :: GHC.Types.Double) ->
                 let {
                   ds :: GHC.Types.Double
                   = case ww of ww6 { GHC.Types.D# ww7 ->
                     case ww1 of ww8 { GHC.Types.D# ww9 ->
                     case ww2 of ww10 { GHC.Types.D# ww11 ->
                     case ww3 of ww14 { GHC.Types.D# ww15 ->
                     case ww4 of ww16 { GHC.Types.D# ww17 ->
                     case ww5 of ww18 { GHC.Types.D# ww19 ->
                     let {
                       y :: GHC.Prim.Double#
                       = GHC.Prim.+##
                           (GHC.Prim.+## (GHC.Prim.*## ww7 ww15) (GHC.Prim.*## ww9 ww17))
                           (GHC.Prim.*## ww11 ww19)
                     } in
                     GHC.Types.D# (GHC.Prim.+## y y) } } } } } }
                 } in
                 (# case ww of wild { GHC.Types.D# x ->
                    case ww3 of wild1 { GHC.Types.D# x1 ->
                    case ds of wild2 { GHC.Types.D# y ->
                    GHC.Types.D# (GHC.Prim.-## x (GHC.Prim.*## x1 y)) } } },
                    case ww1 of wild { GHC.Types.D# x ->
                    case ww4 of wild1 { GHC.Types.D# x1 ->
                    case ds of wild2 { GHC.Types.D# y ->
                    GHC.Types.D# (GHC.Prim.-## x (GHC.Prim.*## x1 y)) } } },
                    case ww2 of wild { GHC.Types.D# x ->
                    case ww5 of wild1 { GHC.Types.D# x1 ->
                    case ds of wild2 { GHC.Types.D# y ->
                    GHC.Types.D# (GHC.Prim.-## x (GHC.Prim.*## x1 y)) } } } #)) -}
e540e20b427d7603439e73fb2636361a
  $wrefract ::
    GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Base.Maybe
         (GHC.Types.Double, GHC.Types.Double, GHC.Types.Double)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><S,U><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Prim.Double#)
                   (ww2 :: GHC.Prim.Double#)
                   (ww3 :: GHC.Prim.Double#)
                   (ww4 :: GHC.Prim.Double#)
                   (ww5 :: GHC.Prim.Double#)
                   (ww6 :: GHC.Prim.Double#) ->
                 let {
                   y :: GHC.Prim.Double#
                   = GHC.Prim.sqrtDouble#
                       (GHC.Prim.+##
                          (GHC.Prim.+## (GHC.Prim.*## ww ww) (GHC.Prim.*## ww1 ww1))
                          (GHC.Prim.*## ww2 ww2))
                 } in
                 case GHC.Prim./## ww y of wild2 { DEFAULT ->
                 case GHC.Prim./## ww1 y of wild1 { DEFAULT ->
                 case GHC.Prim./## ww2 y of wild3 { DEFAULT ->
                 let {
                   x :: GHC.Prim.Double#
                   = GHC.Prim.+##
                       (GHC.Prim.+## (GHC.Prim.*## wild2 ww3) (GHC.Prim.*## wild1 ww4))
                       (GHC.Prim.*## wild3 ww5)
                 } in
                 let {
                   x1 :: GHC.Prim.Double#
                   = GHC.Prim.-##
                       1.0##
                       (GHC.Prim.*##
                          (GHC.Prim.**## ww6 2.0##)
                          (GHC.Prim.-## 1.0## (GHC.Prim.**## x 2.0##)))
                 } in
                 case GHC.Prim.>## x1 0.0## of lwild {
                   DEFAULT -> GHC.Base.Nothing @ Vect3.Vect3
                   1#
                   -> GHC.Base.Just
                        @ (GHC.Types.Double, GHC.Types.Double, GHC.Types.Double)
                        (let {
                           ds :: GHC.Prim.Double# = GHC.Prim.sqrtDouble# x1
                         } in
                         (GHC.Types.D#
                            (GHC.Prim.-##
                               (GHC.Prim.*## (GHC.Prim.-## wild2 (GHC.Prim.*## ww3 x)) ww6)
                               (GHC.Prim.*## ww3 ds)),
                          GHC.Types.D#
                            (GHC.Prim.-##
                               (GHC.Prim.*## (GHC.Prim.-## wild1 (GHC.Prim.*## ww4 x)) ww6)
                               (GHC.Prim.*## ww4 ds)),
                          GHC.Types.D#
                            (GHC.Prim.-##
                               (GHC.Prim.*## (GHC.Prim.-## wild3 (GHC.Prim.*## ww5 x)) ww6)
                               (GHC.Prim.*## ww5 ds)))) } } } }) -}
fa72794ac5305e0235336a9a119a4aba
  $wscatter ::
    Vect3.Vect3
    -> Vect3.Vect3
    -> Hitable.Material
    -> Vect3.Vect3
    -> System.Random.StdGen
    -> (# Vect3.Vect3, Ray.Ray, GHC.Types.Bool #)
  {- Arity: 5,
     Strictness: <L,U(U(U),U(U),U(U))><L,U(U(U),U(U),U(U))><S,1*U><L,1*U(U(U),U(U),U(U))><L,U>,
     Inline: [0] -}
cc2717fd7ea05589521b1c95bea3ae23
  data HitRecord
    = MkHR {t :: GHC.Types.Double,
            p :: Vect3.Vect3,
            normal :: Vect3.Vect3,
            mat :: Hitable.Material}
a1508fbbc177b51ca1dc7692e53b29d2
  data Hitable = Sphere Vect3.Vect3 GHC.Types.Double Hitable.Material
a06b1d65d3fc7d081e89640128e5fb99
  data Material
    = Lambertian Vect3.Vect3
    | Metal Vect3.Vect3 GHC.Types.Double
    | Dielectric GHC.Types.Double
630a9836ef0271a464b2bca338dcda0c
  discriminant :: Hitable.Hitable -> Ray.Ray -> Vect3.Vect3
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*U(U),1*U(U),1*U(U)),1*U(U),A)><S,1*U(1*U(1*U(U),1*U(U),1*U(U)),U(U(U),U(U),U(U)))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Hitable.Hitable) (w1 :: Ray.Ray) ->
                 case w of ww { Hitable.Sphere ww1 ww2 ww3 ->
                 case w1 of ww4 { Ray.MkRay ww5 ww6 ->
                 case Hitable.$wdiscriminant
                        ww1
                        ww2
                        ww5
                        ww6 of ww7 { (#,,#) ww8 ww9 ww10 ->
                 (ww8, ww9, ww10) } } }) -}
754691ec5d6c67e22b74054c0d04cfc0
  hit ::
    Hitable.Hitable
    -> Ray.Ray
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Base.Maybe Hitable.HitRecord
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(S(S)S(S)S(S))S(S)L),1*U(1*U(1*U(U),1*U(U),1*U(U)),1*U(U),U)><S(S(S(S)S(S)S(S))S(S(S)S(S)S(S))),1*U(1*U(1*U(U),1*U(U),1*U(U)),1*U(1*U(U),1*U(U),1*U(U)))><L,U(U)><L,1*U(U)>,
     Unfolding: (\ (s :: Hitable.Hitable)
                   (r :: Ray.Ray)
                   (tMin :: GHC.Types.Double)
                   (tMax :: GHC.Types.Double) ->
                 case s of wild { Hitable.Sphere center radius material ->
                 case r of wild1 { Ray.MkRay origin direction ->
                 case origin of ww { (,,) ww1 ww2 ww3 ->
                 case center of ww4 { (,,) ww5 ww6 ww7 ->
                 case ww1 of wild2 { GHC.Types.D# x ->
                 case ww5 of wild3 { GHC.Types.D# y ->
                 case ww2 of wild4 { GHC.Types.D# x1 ->
                 case ww6 of wild5 { GHC.Types.D# y1 ->
                 case ww3 of wild6 { GHC.Types.D# x2 ->
                 case ww7 of wild7 { GHC.Types.D# y2 ->
                 case direction of ww10 { (,,) ww11 ww12 ww13 ->
                 case ww11 of ww14 { GHC.Types.D# ww15 ->
                 case ww12 of ww16 { GHC.Types.D# ww17 ->
                 case ww13 of ww18 { GHC.Types.D# ww19 ->
                 case radius of wild8 { GHC.Types.D# x3 ->
                 let {
                   ww22 :: GHC.Prim.Double# = GHC.Prim.-## x y
                 } in
                 let {
                   ww23 :: GHC.Prim.Double# = GHC.Prim.-## x1 y1
                 } in
                 let {
                   ww9 :: GHC.Prim.Double# = GHC.Prim.-## x2 y2
                 } in
                 let {
                   x4 :: GHC.Prim.Double#
                   = GHC.Prim.+##
                       (GHC.Prim.+## (GHC.Prim.*## ww22 ww15) (GHC.Prim.*## ww23 ww17))
                       (GHC.Prim.*## ww9 ww19)
                 } in
                 let {
                   x5 :: GHC.Prim.Double#
                   = GHC.Prim.+##
                       (GHC.Prim.+## (GHC.Prim.*## ww15 ww15) (GHC.Prim.*## ww17 ww17))
                       (GHC.Prim.*## ww19 ww19)
                 } in
                 let {
                   y3 :: GHC.Prim.Double#
                   = GHC.Prim.-##
                       (GHC.Prim.+##
                          (GHC.Prim.+## (GHC.Prim.*## ww22 ww22) (GHC.Prim.*## ww23 ww23))
                          (GHC.Prim.*## ww9 ww9))
                       (GHC.Prim.*## x3 x3)
                 } in
                 case GHC.Prim.>##
                        (GHC.Prim.-## (GHC.Prim.*## x4 x4) (GHC.Prim.*## x5 y3))
                        0.0## of lwild {
                   DEFAULT -> GHC.Base.Nothing @ Hitable.HitRecord
                   1#
                   -> case GHC.Prim./##
                             (GHC.Prim.-##
                                (GHC.Prim.negateDouble# x4)
                                (GHC.Prim.sqrtDouble#
                                   (GHC.Prim.-## (GHC.Prim.*## x4 x4) (GHC.Prim.*## x5 y3))))
                             x5 of wild9 { DEFAULT ->
                      case tMax of wild10 { GHC.Types.D# y4 ->
                      let {
                        $j :: GHC.Base.Maybe Hitable.HitRecord <join 0>
                        = case GHC.Prim./##
                                 (GHC.Prim.+##
                                    (GHC.Prim.negateDouble# x4)
                                    (GHC.Prim.sqrtDouble#
                                       (GHC.Prim.-## (GHC.Prim.*## x4 x4) (GHC.Prim.*## x5 y3))))
                                 x5 of wild11 { DEFAULT ->
                          case GHC.Prim.<## wild11 y4 of lwild1 {
                            DEFAULT -> GHC.Base.Nothing @ Hitable.HitRecord
                            1#
                            -> case tMin of wild12 { GHC.Types.D# y5 ->
                               case GHC.Prim.>## wild11 y5 of lwild2 {
                                 DEFAULT -> GHC.Base.Nothing @ Hitable.HitRecord
                                 1#
                                 -> GHC.Base.Just
                                      @ Hitable.HitRecord
                                      (let {
                                         np :: GHC.Prim.Double#
                                         = GHC.Prim.+## x2 (GHC.Prim.*## ww19 wild11)
                                       } in
                                       let {
                                         np1 :: GHC.Prim.Double#
                                         = GHC.Prim.+## x1 (GHC.Prim.*## ww17 wild11)
                                       } in
                                       let {
                                         np2 :: GHC.Prim.Double#
                                         = GHC.Prim.+## x (GHC.Prim.*## ww15 wild11)
                                       } in
                                       Hitable.MkHR
                                         (GHC.Types.D# wild11)
                                         (GHC.Types.D# np2, GHC.Types.D# np1, GHC.Types.D# np)
                                         (case GHC.Prim./##
                                                 (GHC.Prim.-## np2 y)
                                                 x3 of wild13 { DEFAULT ->
                                          GHC.Types.D# wild13 },
                                          case GHC.Prim./##
                                                 (GHC.Prim.-## np1 y1)
                                                 x3 of wild13 { DEFAULT ->
                                          GHC.Types.D# wild13 },
                                          case GHC.Prim./##
                                                 (GHC.Prim.-## np y2)
                                                 x3 of wild13 { DEFAULT ->
                                          GHC.Types.D# wild13 })
                                         material) } } } }
                      } in
                      case GHC.Prim.<## wild9 y4 of lwild1 {
                        DEFAULT -> $j
                        1#
                        -> case tMin of wild11 { GHC.Types.D# y5 ->
                           case GHC.Prim.>## wild9 y5 of lwild2 {
                             DEFAULT -> $j
                             1#
                             -> GHC.Base.Just
                                  @ Hitable.HitRecord
                                  (let {
                                     np :: GHC.Prim.Double#
                                     = GHC.Prim.+## x2 (GHC.Prim.*## ww19 wild9)
                                   } in
                                   let {
                                     np1 :: GHC.Prim.Double#
                                     = GHC.Prim.+## x1 (GHC.Prim.*## ww17 wild9)
                                   } in
                                   let {
                                     np2 :: GHC.Prim.Double#
                                     = GHC.Prim.+## x (GHC.Prim.*## ww15 wild9)
                                   } in
                                   Hitable.MkHR
                                     (GHC.Types.D# wild9)
                                     (GHC.Types.D# np2, GHC.Types.D# np1, GHC.Types.D# np)
                                     (case GHC.Prim./##
                                             (GHC.Prim.-## np2 y)
                                             x3 of wild12 { DEFAULT ->
                                      GHC.Types.D# wild12 },
                                      case GHC.Prim./##
                                             (GHC.Prim.-## np1 y1)
                                             x3 of wild12 { DEFAULT ->
                                      GHC.Types.D# wild12 },
                                      case GHC.Prim./##
                                             (GHC.Prim.-## np y2)
                                             x3 of wild12 { DEFAULT ->
                                      GHC.Types.D# wild12 })
                                     material) } } } } } } } } } } } } } } } } } } } } }) -}
cc2717fd7ea05589521b1c95bea3ae23
  mat :: Hitable.HitRecord -> Hitable.Material
  RecSel Left Hitable.HitRecord
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Hitable.HitRecord) ->
                 case ds of wild { Hitable.MkHR ds1 ds2 ds3 ds4 -> ds4 }) -}
cc2717fd7ea05589521b1c95bea3ae23
  normal :: Hitable.HitRecord -> Vect3.Vect3
  RecSel Left Hitable.HitRecord
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Hitable.HitRecord) ->
                 case ds of wild { Hitable.MkHR ds1 ds2 ds3 ds4 -> ds3 }) -}
cc2717fd7ea05589521b1c95bea3ae23
  p :: Hitable.HitRecord -> Vect3.Vect3
  RecSel Left Hitable.HitRecord
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Hitable.HitRecord) ->
                 case ds of wild { Hitable.MkHR ds1 ds2 ds3 ds4 -> ds2 }) -}
280af882e89f073d813173c20e3a63e6
  randomInUnitSphere :: [GHC.Types.Double] -> Vect3.Vect3
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Types.Double]) ->
                 case Hitable.$wrandomInUnitSphere w of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
0127c7c4e54845390e519bebd4cced6b
  reflect :: Vect3.Vect3 -> Vect3.Vect3 -> Vect3.Vect3
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U(U),U(U),U(U))><S,1*U(U(U),U(U),U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Vect3.Vect3) (w1 :: Vect3.Vect3) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case w1 of ww4 { (,,) ww5 ww6 ww7 ->
                 case Hitable.$wreflect
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 (ww9, ww10, ww11) } } }) -}
b5fe2e8bdf286f0e673c4550fa1662b0
  refract ::
    Vect3.Vect3
    -> Vect3.Vect3 -> GHC.Types.Double -> GHC.Base.Maybe Vect3.Vect3
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U))><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Vect3.Vect3)
                   (w1 :: Vect3.Vect3)
                   (w2 :: GHC.Types.Double) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.D# ww5 ->
                 case ww2 of ww6 { GHC.Types.D# ww7 ->
                 case ww3 of ww8 { GHC.Types.D# ww9 ->
                 case w1 of ww10 { (,,) ww11 ww12 ww13 ->
                 case ww11 of ww14 { GHC.Types.D# ww15 ->
                 case ww12 of ww16 { GHC.Types.D# ww17 ->
                 case ww13 of ww18 { GHC.Types.D# ww19 ->
                 case w2 of ww20 { GHC.Types.D# ww21 ->
                 Hitable.$wrefract
                   ww5
                   ww7
                   ww9
                   ww15
                   ww17
                   ww19
                   ww21 } } } } } } } } }) -}
937bc233ba3388a1b80279073a943700
  scatter ::
    Hitable.HitRecord
    -> Ray.Ray
    -> System.Random.StdGen
    -> (Vect3.Vect3, Ray.Ray, GHC.Types.Bool)
  {- Arity: 3,
     Strictness: <S(LLLS),1*U(A,U(U(U),U(U),U(U)),U(U(U),U(U),U(U)),1*U)><S,1*U(A,1*U(U(U),U(U),U(U)))><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Hitable.HitRecord)
                   (w1 :: Ray.Ray)
                   (w2 :: System.Random.StdGen) ->
                 case w of ww { Hitable.MkHR ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Ray.MkRay ww6 ww7 ->
                 case Hitable.$wscatter
                        ww2
                        ww3
                        ww4
                        ww7
                        w2 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 (ww9, ww10, ww11) } } }) -}
a141a21d288d8f7d6e6718e95059f7dd
  schlick :: GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (cosine :: GHC.Types.Double) (refIdx :: GHC.Types.Double) ->
                 case refIdx of wild1 { GHC.Types.D# y ->
                 case GHC.Prim./##
                        (GHC.Prim.-## 1.0## y)
                        (GHC.Prim.+## 1.0## y) of wild2 { DEFAULT ->
                 case cosine of wild4 { GHC.Types.D# y1 ->
                 let {
                   x :: GHC.Prim.Double# = GHC.Prim.**## wild2 2.0##
                 } in
                 GHC.Types.D#
                   (GHC.Prim.+##
                      x
                      (GHC.Prim.*##
                         (GHC.Prim.-## 1.0## x)
                         (GHC.Prim.**## (GHC.Prim.-## 1.0## y1) 5.0##))) } } }) -}
cc2717fd7ea05589521b1c95bea3ae23
  t :: Hitable.HitRecord -> GHC.Types.Double
  RecSel Left Hitable.HitRecord
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Hitable.HitRecord) ->
                 case ds of wild { Hitable.MkHR ds1 ds2 ds3 ds4 -> ds1 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

