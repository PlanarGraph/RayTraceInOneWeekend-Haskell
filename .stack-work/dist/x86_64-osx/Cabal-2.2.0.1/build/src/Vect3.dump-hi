
==================== FINAL INTERFACE ====================
2019-05-14 01:26:04.495281 UTC

interface raytrace-0.1.0.0-DA41VseRCpx3rR4fL5DUdq:Vect3 [orphan module] 8043
  interface hash: fe3bb7be582b4fb3f1f15bd990b313b9
  ABI hash: b9cdaf8bcb18f0a8745a2802b5b95b88
  export-list hash: 3b85256eda7109159aaf48e1a3fb813a
  orphan hash: cb0cf1ff0e5e56cb44fe7080fa4ebc52
  flag hash: bb69750ab0041fdf79db431911a8076a
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Vect3.aO
  Vect3.cross
  Vect3.dot
  Vect3.getX
  Vect3.getY
  Vect3.getZ
  Vect3.len
  Vect3.mO
  Vect3.makeUnitVect
  Vect3.sqrLen
  Vect3.unit
  Vect3.Vect3
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Float 99c69d365bb2607725a22530ce1ca4b4
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
0dc4ef4428254ba03f8b658d0051b0ef
  $fFractional(,,) :: GHC.Real.Fractional Vect3.Vect3
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Vect3.Vect3
                  Vect3.$fNum(,,)
                  Vect3.$fFractional(,,)_$c/
                  Vect3.$fFractional(,,)_$crecip
                  Vect3.$fFractional(,,)_$cfromRational -}
085ecb92992aff03feb02872f3b4585c
  $fFractional(,,)_$c/ :: Vect3.Vect3 -> Vect3.Vect3 -> Vect3.Vect3
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U),1*U(U))><S,1*U(1*U(U),1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Vect3.Vect3) (w1 :: Vect3.Vect3) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case w1 of ww4 { (,,) ww5 ww6 ww7 ->
                 (GHC.Float.divideDouble ww1 ww5, GHC.Float.divideDouble ww2 ww6,
                  GHC.Float.divideDouble ww3 ww7) } }) -}
18861c3521bd94d717bb4046a79d3280
  $fFractional(,,)_$cfromRational :: GHC.Real.Rational -> Vect3.Vect3
  {- Arity: 1, Strictness: <L,U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Real.Rational) ->
                 (GHC.Float.$fFractionalDouble_$cfromRational x,
                  GHC.Float.$fFractionalDouble_$cfromRational x,
                  GHC.Float.$fFractionalDouble_$cfromRational x)) -}
8c2fd3be2ad725d86f14c76f057426b6
  $fFractional(,,)_$crecip :: Vect3.Vect3 -> Vect3.Vect3
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U),1*U(U))>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (x :: Vect3.Vect3) ->
                 case x of wild { (,,) x2 y2 z2 ->
                 (case x2 of wild1 { GHC.Types.D# y ->
                  case GHC.Prim./## 0.0## y of wild2 { DEFAULT ->
                  GHC.Types.D# wild2 } },
                  case y2 of wild1 { GHC.Types.D# y ->
                  case GHC.Prim./## 0.0## y of wild2 { DEFAULT ->
                  GHC.Types.D# wild2 } },
                  case z2 of wild1 { GHC.Types.D# y ->
                  case GHC.Prim./## 0.0## y of wild2 { DEFAULT ->
                  GHC.Types.D# wild2 } }) }) -}
15b2547d307115b9c88656b43be3d351
  $fNum(,,) :: GHC.Num.Num Vect3.Vect3
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Vect3.Vect3
                  Vect3.$fNum(,,)_$c+
                  Vect3.$fNum(,,)_$c-
                  Vect3.$fNum(,,)_$c*
                  Vect3.$fNum(,,)_$cnegate
                  Vect3.$fNum(,,)_$cabs
                  Vect3.$fNum(,,)_$csignum
                  Vect3.$fNum(,,)_$cfromInteger -}
f5f6b7e4e4d848123c2b61ca260fe958
  $fNum(,,)1 ::
    (GHC.Types.Double, GHC.Types.Double, GHC.Types.Double)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Vect3.$fNum(,,)2, Vect3.$fNum(,,)2,
                  Vect3.$fNum(,,)2)) -}
11aae6a07f996fa2ce475a2c63c24be1
  $fNum(,,)2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0##) -}
e5e4812c19e1a8a2856bf49186b40d9e
  $fNum(,,)_$c* :: Vect3.Vect3 -> Vect3.Vect3 -> Vect3.Vect3
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U),1*U(U))><S,1*U(1*U(U),1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Vect3.Vect3) (w1 :: Vect3.Vect3) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case w1 of ww4 { (,,) ww5 ww6 ww7 ->
                 (GHC.Float.timesDouble ww1 ww5, GHC.Float.timesDouble ww2 ww6,
                  GHC.Float.timesDouble ww3 ww7) } }) -}
c96e10c26be88030d533d178bc8b71e0
  $fNum(,,)_$c+ :: Vect3.Vect3 -> Vect3.Vect3 -> Vect3.Vect3
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U),1*U(U))><S,1*U(1*U(U),1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Vect3.Vect3) (w1 :: Vect3.Vect3) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case w1 of ww4 { (,,) ww5 ww6 ww7 ->
                 (GHC.Float.plusDouble ww1 ww5, GHC.Float.plusDouble ww2 ww6,
                  GHC.Float.plusDouble ww3 ww7) } }) -}
1cce0dfe1e3cf58e51bb31c15972975c
  $fNum(,,)_$c- :: Vect3.Vect3 -> Vect3.Vect3 -> Vect3.Vect3
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U),1*U(U))><S,1*U(1*U(U),1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Vect3.Vect3) (w1 :: Vect3.Vect3) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case w1 of ww4 { (,,) ww5 ww6 ww7 ->
                 (GHC.Float.minusDouble ww1 ww5, GHC.Float.minusDouble ww2 ww6,
                  GHC.Float.minusDouble ww3 ww7) } }) -}
8aed34fcd967ea480c8ec7a41d332485
  $fNum(,,)_$cabs :: Vect3.Vect3 -> Vect3.Vect3
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U),1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Double, GHC.Types.Double,
                           GHC.Types.Double)) ->
                 case ds of wild { (,,) x1 y1 z1 ->
                 (GHC.Float.fabsDouble x1, GHC.Float.fabsDouble y1,
                  GHC.Float.fabsDouble z1) }) -}
fc8cacb804a43fda8ac712bb497a14c4
  $fNum(,,)_$cfromInteger :: GHC.Integer.Type.Integer -> Vect3.Vect3
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (x :: GHC.Integer.Type.Integer) -> Vect3.$fNum(,,)1) -}
081571b79b7a9f043aa653dc9b9eb85f
  $fNum(,,)_$cnegate :: Vect3.Vect3 -> Vect3.Vect3
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U),1*U(U))>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (x :: Vect3.Vect3) ->
                 case x of wild { (,,) x2 y2 z2 ->
                 (case x2 of wild1 { GHC.Types.D# y ->
                  GHC.Types.D# (GHC.Prim.-## 0.0## y) },
                  case y2 of wild1 { GHC.Types.D# y ->
                  GHC.Types.D# (GHC.Prim.-## 0.0## y) },
                  case z2 of wild1 { GHC.Types.D# y ->
                  GHC.Types.D# (GHC.Prim.-## 0.0## y) }) }) -}
e2b9827d05466f8a44da44c2a8f54c50
  $fNum(,,)_$csignum :: Vect3.Vect3 -> Vect3.Vect3
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U),1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Double, GHC.Types.Double,
                           GHC.Types.Double)) ->
                 case ds of wild { (,,) x1 y1 z1 ->
                 (GHC.Float.$fNumDouble_$csignum x1,
                  GHC.Float.$fNumDouble_$csignum y1,
                  GHC.Float.$fNumDouble_$csignum z1) }) -}
7bccb5c62bf5776c7f05a68b09810c18
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Vect3.$trModule3 Vect3.$trModule1) -}
059be46d84444a326b4400c4844216d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Vect3.$trModule2) -}
0ff0fff67877b6be6c4298cc32ba9944
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Vect3"#) -}
720d4912387dd9a804433eecb1094eab
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Vect3.$trModule4) -}
5a8b94323661623a2f7ed82b0b2816b7
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("raytrace-0.1.0.0-DA41VseRCpx3rR4fL5DUdq"#) -}
0677165c36feaa9e8188c53ca2d24618
  type Vect3 = (GHC.Types.Double, GHC.Types.Double, GHC.Types.Double)
3b46a749f18bdffe4db4d9da2051a72d
  aO ::
    (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double)
    -> Vect3.Vect3 -> Vect3.Vect3 -> Vect3.Vect3
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><S,1*U(U,U,U)><S,1*U(U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double)
                   (w1 :: Vect3.Vect3)
                   (w2 :: Vect3.Vect3) ->
                 case w1 of ww { (,,) ww1 ww2 ww3 ->
                 case w2 of ww4 { (,,) ww5 ww6 ww7 ->
                 (w ww1 ww5, w ww2 ww6, w ww3 ww7) } }) -}
075519026dcca5abce7ccca79f1fca7c
  cross :: Vect3.Vect3 -> Vect3.Vect3 -> Vect3.Vect3
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U(U),U(U),U(U))><S,1*U(U(U),U(U),U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Vect3.Vect3) (w1 :: Vect3.Vect3) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case w1 of ww4 { (,,) ww5 ww6 ww7 ->
                 (case ww2 of wild { GHC.Types.D# x ->
                  case ww7 of wild1 { GHC.Types.D# y ->
                  case ww3 of wild2 { GHC.Types.D# x1 ->
                  case ww6 of wild3 { GHC.Types.D# y1 ->
                  GHC.Types.D#
                    (GHC.Prim.-## (GHC.Prim.*## x y) (GHC.Prim.*## x1 y1)) } } } },
                  case ww1 of wild { GHC.Types.D# x ->
                  case ww7 of wild1 { GHC.Types.D# y ->
                  case ww3 of wild2 { GHC.Types.D# x1 ->
                  case ww5 of wild3 { GHC.Types.D# y1 ->
                  GHC.Types.D#
                    (GHC.Prim.*##
                       -1.0##
                       (GHC.Prim.-## (GHC.Prim.*## x y) (GHC.Prim.*## x1 y1))) } } } },
                  case ww1 of wild { GHC.Types.D# x ->
                  case ww6 of wild1 { GHC.Types.D# y ->
                  case ww2 of wild2 { GHC.Types.D# x1 ->
                  case ww5 of wild3 { GHC.Types.D# y1 ->
                  GHC.Types.D#
                    (GHC.Prim.-##
                       (GHC.Prim.*## x y)
                       (GHC.Prim.*## x1 y1)) } } } }) } }) -}
f1cf988260bd2b4d219a9c4abddffbbd
  dot :: Vect3.Vect3 -> Vect3.Vect3 -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Vect3.Vect3) (w1 :: Vect3.Vect3) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.D# ww5 ->
                 case ww2 of ww6 { GHC.Types.D# ww7 ->
                 case ww3 of ww8 { GHC.Types.D# ww9 ->
                 case w1 of ww10 { (,,) ww11 ww12 ww13 ->
                 case ww11 of ww14 { GHC.Types.D# ww15 ->
                 case ww12 of ww16 { GHC.Types.D# ww17 ->
                 case ww13 of ww18 { GHC.Types.D# ww19 ->
                 GHC.Types.D#
                   (GHC.Prim.+##
                      (GHC.Prim.+## (GHC.Prim.*## ww5 ww15) (GHC.Prim.*## ww7 ww17))
                      (GHC.Prim.*## ww9 ww19)) } } } } } } } }) -}
fc6a45b1ffcc6e2fc5883afa626edc9e
  getX :: Vect3.Vect3 -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Double, GHC.Types.Double,
                           GHC.Types.Double)) ->
                 case ds of wild { (,,) x ds1 ds2 -> x }) -}
3f1caaddb38ec078910f38f50a69ed1f
  getY :: Vect3.Vect3 -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Double, GHC.Types.Double,
                           GHC.Types.Double)) ->
                 case ds of wild { (,,) ds1 y ds2 -> y }) -}
c10071a4db38fae205617ccab9cdcec2
  getZ :: Vect3.Vect3 -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Double, GHC.Types.Double,
                           GHC.Types.Double)) ->
                 case ds of wild { (,,) ds1 ds2 z -> z }) -}
10c30e823bf4e59daa55035e0713ec77
  len :: Vect3.Vect3 -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Vect3.Vect3) ->
                 case x of wild { (,,) x1 y z ->
                 case x1 of wild1 { GHC.Types.D# x2 ->
                 case y of wild2 { GHC.Types.D# x3 ->
                 case z of wild3 { GHC.Types.D# x4 ->
                 GHC.Types.D#
                   (GHC.Prim.sqrtDouble#
                      (GHC.Prim.+##
                         (GHC.Prim.+## (GHC.Prim.*## x2 x2) (GHC.Prim.*## x3 x3))
                         (GHC.Prim.*## x4 x4))) } } } }) -}
ccc736fab26538d940b033676733ae0c
  mO :: (GHC.Types.Double -> a) -> Vect3.Vect3 -> (a, a, a)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (f :: GHC.Types.Double -> a)
                   (ds :: (GHC.Types.Double, GHC.Types.Double, GHC.Types.Double)) ->
                 case ds of wild { (,,) x1 y1 z1 -> (f x1, f y1, f z1) }) -}
6eba5a8dfc35efd20ba9051ee66f20a4
  makeUnitVect :: Vect3.Vect3 -> Vect3.Vect3
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U(U),U(U),U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Vect3.Vect3) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 let {
                   ds :: GHC.Types.Double
                   = case ww1 of wild { GHC.Types.D# x ->
                     case ww2 of wild1 { GHC.Types.D# x1 ->
                     case ww3 of wild2 { GHC.Types.D# x2 ->
                     case GHC.Prim./##
                            1.0##
                            (GHC.Prim.sqrtDouble#
                               (GHC.Prim.+##
                                  (GHC.Prim.+## (GHC.Prim.*## x x) (GHC.Prim.*## x1 x1))
                                  (GHC.Prim.*## x2 x2))) of wild3 { DEFAULT ->
                     GHC.Types.D# wild3 } } } }
                 } in
                 (GHC.Float.timesDouble ww1 ds, GHC.Float.timesDouble ww2 ds,
                  GHC.Float.timesDouble ww3 ds) }) -}
e475dae020b1b6b21cc25499ba4bebbb
  sqrLen :: Vect3.Vect3 -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Double, GHC.Types.Double,
                           GHC.Types.Double)) ->
                 case ds of wild { (,,) x y z ->
                 case x of wild1 { GHC.Types.D# x1 ->
                 case y of wild2 { GHC.Types.D# x2 ->
                 case z of wild3 { GHC.Types.D# x3 ->
                 GHC.Types.D#
                   (GHC.Prim.+##
                      (GHC.Prim.+## (GHC.Prim.*## x1 x1) (GHC.Prim.*## x2 x2))
                      (GHC.Prim.*## x3 x3)) } } } }) -}
024b2f2ba5cc2f6d9d141284b7f5ce4e
  unit :: Vect3.Vect3 -> Vect3.Vect3
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U(U),U(U),U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Vect3.Vect3) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 let {
                   ds :: GHC.Types.Double
                   = case ww1 of wild { GHC.Types.D# x ->
                     case ww2 of wild1 { GHC.Types.D# x1 ->
                     case ww3 of wild2 { GHC.Types.D# x2 ->
                     GHC.Types.D#
                       (GHC.Prim.sqrtDouble#
                          (GHC.Prim.+##
                             (GHC.Prim.+## (GHC.Prim.*## x x) (GHC.Prim.*## x1 x1))
                             (GHC.Prim.*## x2 x2))) } } }
                 } in
                 (GHC.Float.divideDouble ww1 ds, GHC.Float.divideDouble ww2 ds,
                  GHC.Float.divideDouble ww3 ds) }) -}
instance [safe] [orphan] GHC.Real.Fractional [(,,)]
  = Vect3.$fFractional(,,)
instance [safe] [orphan] GHC.Num.Num [(,,)] = Vect3.$fNum(,,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

