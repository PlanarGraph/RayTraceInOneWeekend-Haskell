
==================== FINAL INTERFACE ====================
2019-05-14 01:26:04.690539 UTC

interface raytrace-0.1.0.0-DA41VseRCpx3rR4fL5DUdq:Ray 8043
  interface hash: 4a257393c37ff1a46cfd5c3535df97a5
  ABI hash: 5e1d3ed2d22855e66b9e329bc7210ca0
  export-list hash: ea48f532ce0ebdf3df85a4de6319a7e4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8f52f5e5828eb5661f405d8d9ca450ec
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Ray.pointAtParameter
  Ray.Ray{Ray.MkRay direction origin}
module dependencies: Vect3
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: raytrace-0.1.0.0-DA41VseRCpx3rR4fL5DUdq:Vect3
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  Vect3 b9cdaf8bcb18f0a8745a2802b5b95b88
  exports: 3b85256eda7109159aaf48e1a3fb813a
  Vect3 0677165c36feaa9e8188c53ca2d24618
6f6c894e9056dfcd212bdfd525b6b319
  $tc'MkRay :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13284642221653246773##
                   6931879387242527366##
                   Ray.$trModule
                   Ray.$tc'MkRay2
                   0#
                   Ray.$tc'MkRay1) -}
ecfe46585f1c04407f66a4ab6f5484f7
  $tc'MkRay1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
36c4996e275dcd12055701302555b751
  $tc'MkRay2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Ray.$tc'MkRay3) -}
02b84e0fea1c987a8b3e48a8eb73a7cd
  $tc'MkRay3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MkRay"#) -}
46ca6e7dbbc45eae1aef0cffaa8199b1
  $tcRay :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16584177798196484286##
                   14026997422697890103##
                   Ray.$trModule
                   Ray.$trModule1
                   0#
                   GHC.Types.krep$*) -}
0b878f9b986b1743c2e31ae6d973936f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Ray.$trModule3 Ray.$trModule1) -}
a4c1eff6a3e1de46ee0165e5ffe282b4
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Ray.$trModule2) -}
c80908b2e7eec1819ed4b9145223fa4b
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ray"#) -}
8471a238ff1baabe9f1146f41e86eb85
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Ray.$trModule4) -}
8339db99453bb6c782650603b0171c49
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("raytrace-0.1.0.0-DA41VseRCpx3rR4fL5DUdq"#) -}
dab2c393db8bd018a1ce5ed25bcbe8ec
  data Ray = MkRay {origin :: Vect3.Vect3, direction :: Vect3.Vect3}
dab2c393db8bd018a1ce5ed25bcbe8ec
  direction :: Ray.Ray -> Vect3.Vect3
  RecSel Left Ray.Ray
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Ray.Ray) ->
                 case ds of wild { Ray.MkRay ds1 ds2 -> ds2 }) -}
dab2c393db8bd018a1ce5ed25bcbe8ec
  origin :: Ray.Ray -> Vect3.Vect3
  RecSel Left Ray.Ray
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Ray.Ray) ->
                 case ds of wild { Ray.MkRay ds1 ds2 -> ds1 }) -}
69a217ac02b2df7acdc3b1f865505d25
  pointAtParameter :: Ray.Ray -> GHC.Types.Double -> Vect3.Vect3
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SS),1*U(1*U(1*U(U),1*U(U),1*U(U)),1*U(1*U(U),1*U(U),1*U(U)))><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Ray.Ray) (w1 :: GHC.Types.Double) ->
                 case w of ww { Ray.MkRay ww1 ww2 ->
                 case ww1 of ww3 { (,,) ww4 ww5 ww6 ->
                 case ww2 of ww7 { (,,) ww8 ww9 ww10 ->
                 (case ww4 of wild { GHC.Types.D# x ->
                  case ww8 of wild1 { GHC.Types.D# x1 ->
                  case w1 of wild2 { GHC.Types.D# y ->
                  GHC.Types.D# (GHC.Prim.+## x (GHC.Prim.*## x1 y)) } } },
                  case ww5 of wild { GHC.Types.D# x ->
                  case ww9 of wild1 { GHC.Types.D# x1 ->
                  case w1 of wild2 { GHC.Types.D# y ->
                  GHC.Types.D# (GHC.Prim.+## x (GHC.Prim.*## x1 y)) } } },
                  case ww6 of wild { GHC.Types.D# x ->
                  case ww10 of wild1 { GHC.Types.D# x1 ->
                  case w1 of wild2 { GHC.Types.D# y ->
                  GHC.Types.D# (GHC.Prim.+## x (GHC.Prim.*## x1 y)) } } }) } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

