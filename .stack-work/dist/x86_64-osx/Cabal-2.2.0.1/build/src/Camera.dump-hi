
==================== FINAL INTERFACE ====================
2019-05-14 01:26:05.634607 UTC

interface raytrace-0.1.0.0-DA41VseRCpx3rR4fL5DUdq:Camera 8043
  interface hash: 0ae57ab930302ae956dd579a68d6b8da
  ABI hash: 598ab171be5b742ea65313161d4dd72a
  export-list hash: ae737459023c9c74e3b8953e62562fd7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8f52f5e5828eb5661f405d8d9ca450ec
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Camera.getRay
  Camera.makeCamera
  Camera.randomInUnitDisk
  Camera.Camera{Camera.MkCamera horizontal lensRadius lowerLeftCorner origin u v vertical w}
module dependencies: Ray Vect3
package dependencies: array-0.5.2.0 base-4.11.1.0* deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 random-1.1* time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         raytrace-0.1.0.0-DA41VseRCpx3rR4fL5DUdq:Vect3
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:GHC.Float 99c69d365bb2607725a22530ce1ca4b4
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  random-1.1:System.Random 6bcaf7d3cfad85f40dc48ba73a0e29c2
import  -/  Ray 5e1d3ed2d22855e66b9e329bc7210ca0
  exports: ea48f532ce0ebdf3df85a4de6319a7e4
  MkRay 1b2cc71d1f08cf95ce539aa06859b51c
  Ray dab2c393db8bd018a1ce5ed25bcbe8ec
import  -/  Vect3 b9cdaf8bcb18f0a8745a2802b5b95b88
  exports: 3b85256eda7109159aaf48e1a3fb813a
  Vect3 0677165c36feaa9e8188c53ca2d24618
  cross 075519026dcca5abce7ccca79f1fca7c
  dot f1cf988260bd2b4d219a9c4abddffbbd
  getX fc6a45b1ffcc6e2fc5883afa626edc9e
  getY 3f1caaddb38ec078910f38f50a69ed1f
  mO ccc736fab26538d940b033676733ae0c
  unit 024b2f2ba5cc2f6d9d141284b7f5ce4e
b58bab762e5de9640b7993bdd6b28080
  $tc'MkCamera :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14544239045274504041##
                   14664439602309203521##
                   Camera.$trModule
                   Camera.$tc'MkCamera2
                   0#
                   Camera.$tc'MkCamera1) -}
9b2cf94cab2e1a9340a5b19728391070
  $tc'MkCamera1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
503fe60c80b1f21434a3048bdc95432c
  $tc'MkCamera2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Camera.$tc'MkCamera3) -}
9eda0f9904eafa6cd2ae8fce14384395
  $tc'MkCamera3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MkCamera"#) -}
f833195203d491ae2100b2211fab7739
  $tcCamera :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15941491684896654840##
                   13406439180398961219##
                   Camera.$trModule
                   Camera.$trModule1
                   0#
                   GHC.Types.krep$*) -}
617beb085343b3fcffd549ac191918aa
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Camera.$trModule3
                   Camera.$trModule1) -}
919abb8c7f18d2e3f342563e3e0ad50a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Camera.$trModule2) -}
4cc0fd758015cf2808512fb4eb1b55cf
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Camera"#) -}
613b12e1ea649687661a8789e5f6118d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Camera.$trModule4) -}
84c9600e11e2aef41890761f7ea54fac
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("raytrace-0.1.0.0-DA41VseRCpx3rR4fL5DUdq"#) -}
55b028e0f6463e77ad9385b7447b976a
  $wgetRay ::
    Vect3.Vect3
    -> Vect3.Vect3
    -> Vect3.Vect3
    -> Vect3.Vect3
    -> Vect3.Vect3
    -> Vect3.Vect3
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> System.Random.StdGen
    -> (# Vect3.Vect3, Vect3.Vect3 #)
  {- Arity: 10,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U),1*U(U))><L,U(U(U),U(U),U(U))><L,1*U(1*U(U),1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U),1*U(U))><L,U(U)><L,U(U)><L,U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Vect3.Vect3)
                   (ww1 :: Vect3.Vect3)
                   (ww2 :: Vect3.Vect3)
                   (ww3 :: Vect3.Vect3)
                   (ww4 :: Vect3.Vect3)
                   (ww5 :: Vect3.Vect3)
                   (ww6 :: GHC.Types.Double)
                   (w1 :: GHC.Types.Double)
                   (w2 :: GHC.Types.Double)
                   (w3 :: System.Random.StdGen) ->
                 let {
                   offset :: (GHC.Types.Double, GHC.Types.Double, GHC.Types.Double)
                   = case ww4 of wild { (,,) x1 y1 z1 ->
                     case ww5 of wild1 { (,,) x2 y2 z2 ->
                     let {
                       rd :: (GHC.Types.Double, GHC.Types.Double, GHC.Types.Double)
                       = case Camera.$wrandomInUnitDisk
                                (Camera.getRay_go w3) of ww7 { (#,,#) ww8 ww9 ww10 ->
                         (GHC.Float.timesDouble ww8 ww6, GHC.Float.timesDouble ww9 ww6,
                          GHC.Float.timesDouble ww10 ww6) }
                     } in
                     let {
                       ds :: GHC.Types.Double = case rd of wild2 { (,,) x ds1 ds2 -> x }
                     } in
                     let {
                       ds1 :: GHC.Types.Double = case rd of wild2 { (,,) ds2 y ds3 -> y }
                     } in
                     (case x1 of wild2 { GHC.Types.D# x ->
                      case ds of wild3 { GHC.Types.D# y ->
                      case x2 of wild4 { GHC.Types.D# x3 ->
                      case ds1 of wild5 { GHC.Types.D# y3 ->
                      GHC.Types.D#
                        (GHC.Prim.+## (GHC.Prim.*## x y) (GHC.Prim.*## x3 y3)) } } } },
                      case y1 of wild2 { GHC.Types.D# x ->
                      case ds of wild3 { GHC.Types.D# y ->
                      case y2 of wild4 { GHC.Types.D# x3 ->
                      case ds1 of wild5 { GHC.Types.D# y3 ->
                      GHC.Types.D#
                        (GHC.Prim.+## (GHC.Prim.*## x y) (GHC.Prim.*## x3 y3)) } } } },
                      case z1 of wild2 { GHC.Types.D# x ->
                      case ds of wild3 { GHC.Types.D# y ->
                      case z2 of wild4 { GHC.Types.D# x3 ->
                      case ds1 of wild5 { GHC.Types.D# y3 ->
                      GHC.Types.D#
                        (GHC.Prim.+## (GHC.Prim.*## x y) (GHC.Prim.*## x3 y3)) } } } }) } }
                 } in
                 (# Vect3.$fNum(,,)_$c+ ww3 offset,
                    case ww1 of wild { (,,) x1 y1 z1 ->
                    case ww2 of wild1 { (,,) x2 y2 z2 ->
                    case ww of ww7 { (,,) ww8 ww9 ww10 ->
                    case ww3 of ww11 { (,,) ww12 ww13 ww14 ->
                    case offset of ww15 { (,,) ww16 ww17 ww18 ->
                    (case ww8 of wild2 { GHC.Types.D# x ->
                     case x1 of wild3 { GHC.Types.D# x3 ->
                     case w1 of wild4 { GHC.Types.D# y ->
                     case x2 of wild5 { GHC.Types.D# x4 ->
                     case w2 of wild6 { GHC.Types.D# y3 ->
                     case ww12 of wild7 { GHC.Types.D# y4 ->
                     case ww16 of wild8 { GHC.Types.D# y5 ->
                     GHC.Types.D#
                       (GHC.Prim.-##
                          (GHC.Prim.-##
                             (GHC.Prim.+##
                                (GHC.Prim.+## x (GHC.Prim.*## x3 y))
                                (GHC.Prim.*## x4 y3))
                             y4)
                          y5) } } } } } } },
                     case ww9 of wild2 { GHC.Types.D# x ->
                     case y1 of wild3 { GHC.Types.D# x3 ->
                     case w1 of wild4 { GHC.Types.D# y ->
                     case y2 of wild5 { GHC.Types.D# x4 ->
                     case w2 of wild6 { GHC.Types.D# y3 ->
                     case ww13 of wild7 { GHC.Types.D# y4 ->
                     case ww17 of wild8 { GHC.Types.D# y5 ->
                     GHC.Types.D#
                       (GHC.Prim.-##
                          (GHC.Prim.-##
                             (GHC.Prim.+##
                                (GHC.Prim.+## x (GHC.Prim.*## x3 y))
                                (GHC.Prim.*## x4 y3))
                             y4)
                          y5) } } } } } } },
                     case ww10 of wild2 { GHC.Types.D# x ->
                     case z1 of wild3 { GHC.Types.D# x3 ->
                     case w1 of wild4 { GHC.Types.D# y ->
                     case z2 of wild5 { GHC.Types.D# x4 ->
                     case w2 of wild6 { GHC.Types.D# y3 ->
                     case ww14 of wild7 { GHC.Types.D# y4 ->
                     case ww18 of wild8 { GHC.Types.D# y5 ->
                     GHC.Types.D#
                       (GHC.Prim.-##
                          (GHC.Prim.-##
                             (GHC.Prim.+##
                                (GHC.Prim.+## x (GHC.Prim.*## x3 y))
                                (GHC.Prim.*## x4 y3))
                             y4)
                          y5) } } } } } } }) } } } } } #)) -}
af2a77d05661c0d2943ab2c215267e91
  $wmakeCamera ::
    Vect3.Vect3
    -> Vect3.Vect3
    -> Vect3.Vect3
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> (# Vect3.Vect3, Vect3.Vect3, Vect3.Vect3, Vect3.Vect3,
          Vect3.Vect3, Vect3.Vect3, Vect3.Vect3, GHC.Types.Double #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(U(U),U(U),U(U))><L,1*U(1*U(U),1*U(U),1*U(U))><L,1*U(U(U),U(U),U(U))><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U(U)>,
     Inline: [0] -}
8cde6fef8bfaabc292346450d0101026
  $wrandomInUnitDisk ::
    [GHC.Types.Double]
    -> (# GHC.Types.Double, GHC.Types.Double, GHC.Types.Double #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
26562e4bd4122373a5ca22dd41cf7161
  data Camera
    = MkCamera {lowerLeftCorner :: Vect3.Vect3,
                horizontal :: Vect3.Vect3,
                vertical :: Vect3.Vect3,
                origin :: Vect3.Vect3,
                u :: Vect3.Vect3,
                v :: Vect3.Vect3,
                w :: Vect3.Vect3,
                lensRadius :: GHC.Types.Double}
4da15452293b625d09af9452ac4e7473
  getRay ::
    Camera.Camera
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> System.Random.StdGen
    -> Ray.Ray
  {- Arity: 4,
     Strictness: <S,1*U(1*U(1*U(U),1*U(U),1*U(U)),1*U(1*U(U),1*U(U),1*U(U)),1*U(1*U(U),1*U(U),1*U(U)),U(U(U),U(U),U(U)),1*U(1*U(U),1*U(U),1*U(U)),1*U(1*U(U),1*U(U),1*U(U)),A,U(U))><L,U(U)><L,U(U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w1 :: Camera.Camera)
                   (w2 :: GHC.Types.Double)
                   (w3 :: GHC.Types.Double)
                   (w4 :: System.Random.StdGen) ->
                 case w1 of ww { Camera.MkCamera ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Camera.$wgetRay
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww8
                        w2
                        w3
                        w4 of ww9 { (#,#) ww10 ww11 ->
                 Ray.MkRay ww10 ww11 } }) -}
23003830c6ea23ceae18e6e54a569251
  getRay_go :: System.Random.StdGen -> [GHC.Types.Double]
  {- Arity: 1, Strictness: <L,U>m2 -}
26562e4bd4122373a5ca22dd41cf7161
  horizontal :: Camera.Camera -> Vect3.Vect3
  RecSel Left Camera.Camera
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLL),1*U(A,1*U(U,U,U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Camera.Camera) ->
                 case ds of wild { Camera.MkCamera ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds2 }) -}
26562e4bd4122373a5ca22dd41cf7161
  lensRadius :: Camera.Camera -> GHC.Types.Double
  RecSel Left Camera.Camera
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLS),1*U(A,A,A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Camera.Camera) ->
                 case ds of wild { Camera.MkCamera ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds8 }) -}
26562e4bd4122373a5ca22dd41cf7161
  lowerLeftCorner :: Camera.Camera -> Vect3.Vect3
  RecSel Left Camera.Camera
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U(U,U,U),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Camera.Camera) ->
                 case ds of wild { Camera.MkCamera ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds1 }) -}
4af68b5ccf725c6e783898a11745464b
  makeCamera ::
    Vect3.Vect3
    -> Vect3.Vect3
    -> Vect3.Vect3
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> Camera.Camera
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(U(U),U(U),U(U))><L,1*U(1*U(U),1*U(U),1*U(U))><L,1*U(U(U),U(U),U(U))><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ (w1 :: Vect3.Vect3)
                   (w2 :: Vect3.Vect3)
                   (w3 :: Vect3.Vect3)
                   (w4 :: GHC.Types.Double)
                   (w5 :: GHC.Types.Double)
                   (w6 :: GHC.Types.Double)
                   (w7 :: GHC.Types.Double) ->
                 case Camera.$wmakeCamera
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7 of ww { (#,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Camera.MkCamera ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 }) -}
26562e4bd4122373a5ca22dd41cf7161
  origin :: Camera.Camera -> Vect3.Vect3
  RecSel Left Camera.Camera
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLL),1*U(A,A,A,1*U(U,U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Camera.Camera) ->
                 case ds of wild { Camera.MkCamera ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds4 }) -}
93dba7b8c1648ba8e5e79ba500aa39e3
  randomInUnitDisk :: [GHC.Types.Double] -> Vect3.Vect3
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: [GHC.Types.Double]) ->
                 case Camera.$wrandomInUnitDisk w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
26562e4bd4122373a5ca22dd41cf7161
  u :: Camera.Camera -> Vect3.Vect3
  RecSel Left Camera.Camera
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLL),1*U(A,A,A,A,1*U(U,U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Camera.Camera) ->
                 case ds of wild { Camera.MkCamera ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds5 }) -}
26562e4bd4122373a5ca22dd41cf7161
  v :: Camera.Camera -> Vect3.Vect3
  RecSel Left Camera.Camera
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLL),1*U(A,A,A,A,A,1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Camera.Camera) ->
                 case ds of wild { Camera.MkCamera ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds6 }) -}
26562e4bd4122373a5ca22dd41cf7161
  vertical :: Camera.Camera -> Vect3.Vect3
  RecSel Left Camera.Camera
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLL),1*U(A,A,1*U(U,U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Camera.Camera) ->
                 case ds of wild { Camera.MkCamera ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds3 }) -}
26562e4bd4122373a5ca22dd41cf7161
  w :: Camera.Camera -> Vect3.Vect3
  RecSel Left Camera.Camera
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSL),1*U(A,A,A,A,A,A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Camera.Camera) ->
                 case ds of wild { Camera.MkCamera ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds7 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

